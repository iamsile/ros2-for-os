# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'InteractiveMarkerFeedback'."""

    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _TYPE_SUPPORT = None

    __constants = {
        'KEEP_ALIVE': 0,
        'POSE_UPDATE': 1,
        'MENU_SELECT': 2,
        'BUTTON_CLICK': 3,
        'MOUSE_DOWN': 4,
        'MOUSE_UP': 5,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            import rclpy
            from rosidl_generator_py import import_type_support
            rclpy_implementation = rclpy._rclpy.rclpy_get_rmw_implementation_identifier()
            module = import_type_support(
                'visualization_msgs', rclpy_implementation)
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.InteractiveMarkerFeedback')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CONVERT_FROM_PY = module.convert_from_py_msg_interactive_marker_feedback
            cls._CONVERT_TO_PY = module.convert_to_py_msg_interactive_marker_feedback
            cls._TYPE_SUPPORT = module.type_support_msg_interactive_marker_feedback
            from geometry_msgs.msg import Point
            if Point.__class__._TYPE_SUPPORT is None:
                Point.__class__.__import_type_support__()
            from geometry_msgs.msg import Pose
            if Pose.__class__._TYPE_SUPPORT is None:
                Pose.__class__.__import_type_support__()
            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'KEEP_ALIVE': cls.__constants['KEEP_ALIVE'],
            'POSE_UPDATE': cls.__constants['POSE_UPDATE'],
            'MENU_SELECT': cls.__constants['MENU_SELECT'],
            'BUTTON_CLICK': cls.__constants['BUTTON_CLICK'],
            'MOUSE_DOWN': cls.__constants['MOUSE_DOWN'],
            'MOUSE_UP': cls.__constants['MOUSE_UP'],
        }

    @property
    def KEEP_ALIVE(self):
        """Message constant 'KEEP_ALIVE'."""
        return Metaclass.__constants['KEEP_ALIVE']

    @property
    def POSE_UPDATE(self):
        """Message constant 'POSE_UPDATE'."""
        return Metaclass.__constants['POSE_UPDATE']

    @property
    def MENU_SELECT(self):
        """Message constant 'MENU_SELECT'."""
        return Metaclass.__constants['MENU_SELECT']

    @property
    def BUTTON_CLICK(self):
        """Message constant 'BUTTON_CLICK'."""
        return Metaclass.__constants['BUTTON_CLICK']

    @property
    def MOUSE_DOWN(self):
        """Message constant 'MOUSE_DOWN'."""
        return Metaclass.__constants['MOUSE_DOWN']

    @property
    def MOUSE_UP(self):
        """Message constant 'MOUSE_UP'."""
        return Metaclass.__constants['MOUSE_UP']


class InteractiveMarkerFeedback(metaclass=Metaclass):
    """
    Message class 'InteractiveMarkerFeedback'.

    Constants:
      KEEP_ALIVE
      POSE_UPDATE
      MENU_SELECT
      BUTTON_CLICK
      MOUSE_DOWN
      MOUSE_UP
    """

    __slots__ = [
        '_header',
        '_client_id',
        '_marker_name',
        '_control_name',
        '_event_type',
        '_pose',
        '_menu_entry_id',
        '_mouse_point',
        '_mouse_point_valid',
    ]

    def __init__(self, **kwargs):
        assert all(['_' + key in self.__slots__ for key in kwargs.keys()]), \
            "Invalid arguments passed to constructor: %r" % kwargs.keys()
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.client_id = kwargs.get('client_id', str())
        self.marker_name = kwargs.get('marker_name', str())
        self.control_name = kwargs.get('control_name', str())
        self.event_type = kwargs.get('event_type', int())
        from geometry_msgs.msg import Pose
        self.pose = kwargs.get('pose', Pose())
        self.menu_entry_id = kwargs.get('menu_entry_id', int())
        from geometry_msgs.msg import Point
        self.mouse_point = kwargs.get('mouse_point', Point())
        self.mouse_point_valid = kwargs.get('mouse_point_valid', bool())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        from std_msgs.msg import Header
        assert \
            isinstance(value, Header)
        self._header = value

    @property
    def client_id(self):
        """Message field 'client_id'."""
        return self._client_id

    @client_id.setter
    def client_id(self, value):
        assert \
            isinstance(value, str)
        self._client_id = value

    @property
    def marker_name(self):
        """Message field 'marker_name'."""
        return self._marker_name

    @marker_name.setter
    def marker_name(self, value):
        assert \
            isinstance(value, str)
        self._marker_name = value

    @property
    def control_name(self):
        """Message field 'control_name'."""
        return self._control_name

    @control_name.setter
    def control_name(self, value):
        assert \
            isinstance(value, str)
        self._control_name = value

    @property
    def event_type(self):
        """Message field 'event_type'."""
        return self._event_type

    @event_type.setter
    def event_type(self, value):
        assert \
            isinstance(value, int)
        assert value >= 0 and value < 256
        self._event_type = value

    @property
    def pose(self):
        """Message field 'pose'."""
        return self._pose

    @pose.setter
    def pose(self, value):
        from geometry_msgs.msg import Pose
        assert \
            isinstance(value, Pose)
        self._pose = value

    @property
    def menu_entry_id(self):
        """Message field 'menu_entry_id'."""
        return self._menu_entry_id

    @menu_entry_id.setter
    def menu_entry_id(self, value):
        assert \
            isinstance(value, int)
        assert value >= 0 and value < 4294967296
        self._menu_entry_id = value

    @property
    def mouse_point(self):
        """Message field 'mouse_point'."""
        return self._mouse_point

    @mouse_point.setter
    def mouse_point(self, value):
        from geometry_msgs.msg import Point
        assert \
            isinstance(value, Point)
        self._mouse_point = value

    @property
    def mouse_point_valid(self):
        """Message field 'mouse_point_valid'."""
        return self._mouse_point_valid

    @mouse_point_valid.setter
    def mouse_point_valid(self, value):
        assert \
            isinstance(value, bool)
        self._mouse_point_valid = value
