# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'InteractiveMarker'."""

    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            import rclpy
            from rosidl_generator_py import import_type_support
            rclpy_implementation = rclpy._rclpy.rclpy_get_rmw_implementation_identifier()
            module = import_type_support(
                'visualization_msgs', rclpy_implementation)
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.InteractiveMarker')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CONVERT_FROM_PY = module.convert_from_py_msg_interactive_marker
            cls._CONVERT_TO_PY = module.convert_to_py_msg_interactive_marker
            cls._TYPE_SUPPORT = module.type_support_msg_interactive_marker
            from geometry_msgs.msg import Pose
            if Pose.__class__._TYPE_SUPPORT is None:
                Pose.__class__.__import_type_support__()
            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()
            from visualization_msgs.msg import InteractiveMarkerControl
            if InteractiveMarkerControl.__class__._TYPE_SUPPORT is None:
                InteractiveMarkerControl.__class__.__import_type_support__()
            from visualization_msgs.msg import MenuEntry
            if MenuEntry.__class__._TYPE_SUPPORT is None:
                MenuEntry.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class InteractiveMarker(metaclass=Metaclass):
    """Message class 'InteractiveMarker'."""

    __slots__ = [
        '_header',
        '_pose',
        '_name',
        '_description',
        '_scale',
        '_menu_entries',
        '_controls',
    ]

    def __init__(self, **kwargs):
        assert all(['_' + key in self.__slots__ for key in kwargs.keys()]), \
            "Invalid arguments passed to constructor: %r" % kwargs.keys()
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        from geometry_msgs.msg import Pose
        self.pose = kwargs.get('pose', Pose())
        self.name = kwargs.get('name', str())
        self.description = kwargs.get('description', str())
        self.scale = kwargs.get('scale', float())
        self.menu_entries = kwargs.get('menu_entries', list())
        self.controls = kwargs.get('controls', list())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        from std_msgs.msg import Header
        assert \
            isinstance(value, Header)
        self._header = value

    @property
    def pose(self):
        """Message field 'pose'."""
        return self._pose

    @pose.setter
    def pose(self, value):
        from geometry_msgs.msg import Pose
        assert \
            isinstance(value, Pose)
        self._pose = value

    @property
    def name(self):
        """Message field 'name'."""
        return self._name

    @name.setter
    def name(self, value):
        assert \
            isinstance(value, str)
        self._name = value

    @property
    def description(self):
        """Message field 'description'."""
        return self._description

    @description.setter
    def description(self, value):
        assert \
            isinstance(value, str)
        self._description = value

    @property
    def scale(self):
        """Message field 'scale'."""
        return self._scale

    @scale.setter
    def scale(self, value):
        assert \
            isinstance(value, float)
        self._scale = value

    @property
    def menu_entries(self):
        """Message field 'menu_entries'."""
        return self._menu_entries

    @menu_entries.setter
    def menu_entries(self, value):
        from visualization_msgs.msg import MenuEntry
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
        assert \
            ((isinstance(value, Sequence) or
              isinstance(value, Set) or
              isinstance(value, UserList)) and
             not isinstance(value, str) and
             not isinstance(value, UserString) and
             all([isinstance(v, MenuEntry) for v in value]) and
             True)
        self._menu_entries = value

    @property
    def controls(self):
        """Message field 'controls'."""
        return self._controls

    @controls.setter
    def controls(self, value):
        from visualization_msgs.msg import InteractiveMarkerControl
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
        assert \
            ((isinstance(value, Sequence) or
              isinstance(value, Set) or
              isinstance(value, UserList)) and
             not isinstance(value, str) and
             not isinstance(value, UserString) and
             all([isinstance(v, InteractiveMarkerControl) for v in value]) and
             True)
        self._controls = value
