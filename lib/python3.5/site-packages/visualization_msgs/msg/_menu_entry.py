# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'MenuEntry'."""

    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _TYPE_SUPPORT = None

    __constants = {
        'FEEDBACK': 0,
        'ROSRUN': 1,
        'ROSLAUNCH': 2,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            import rclpy
            from rosidl_generator_py import import_type_support
            rclpy_implementation = rclpy._rclpy.rclpy_get_rmw_implementation_identifier()
            module = import_type_support(
                'visualization_msgs', rclpy_implementation)
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.MenuEntry')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CONVERT_FROM_PY = module.convert_from_py_msg_menu_entry
            cls._CONVERT_TO_PY = module.convert_to_py_msg_menu_entry
            cls._TYPE_SUPPORT = module.type_support_msg_menu_entry

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'FEEDBACK': cls.__constants['FEEDBACK'],
            'ROSRUN': cls.__constants['ROSRUN'],
            'ROSLAUNCH': cls.__constants['ROSLAUNCH'],
        }

    @property
    def FEEDBACK(self):
        """Message constant 'FEEDBACK'."""
        return Metaclass.__constants['FEEDBACK']

    @property
    def ROSRUN(self):
        """Message constant 'ROSRUN'."""
        return Metaclass.__constants['ROSRUN']

    @property
    def ROSLAUNCH(self):
        """Message constant 'ROSLAUNCH'."""
        return Metaclass.__constants['ROSLAUNCH']


class MenuEntry(metaclass=Metaclass):
    """
    Message class 'MenuEntry'.

    Constants:
      FEEDBACK
      ROSRUN
      ROSLAUNCH
    """

    __slots__ = [
        '_id',
        '_parent_id',
        '_title',
        '_command',
        '_command_type',
    ]

    def __init__(self, **kwargs):
        assert all(['_' + key in self.__slots__ for key in kwargs.keys()]), \
            "Invalid arguments passed to constructor: %r" % kwargs.keys()
        self.id = kwargs.get('id', int())
        self.parent_id = kwargs.get('parent_id', int())
        self.title = kwargs.get('title', str())
        self.command = kwargs.get('command', str())
        self.command_type = kwargs.get('command_type', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    @property
    def id(self):
        """Message field 'id'."""
        return self._id

    @id.setter
    def id(self, value):
        assert \
            isinstance(value, int)
        assert value >= 0 and value < 4294967296
        self._id = value

    @property
    def parent_id(self):
        """Message field 'parent_id'."""
        return self._parent_id

    @parent_id.setter
    def parent_id(self, value):
        assert \
            isinstance(value, int)
        assert value >= 0 and value < 4294967296
        self._parent_id = value

    @property
    def title(self):
        """Message field 'title'."""
        return self._title

    @title.setter
    def title(self, value):
        assert \
            isinstance(value, str)
        self._title = value

    @property
    def command(self):
        """Message field 'command'."""
        return self._command

    @command.setter
    def command(self, value):
        assert \
            isinstance(value, str)
        self._command = value

    @property
    def command_type(self):
        """Message field 'command_type'."""
        return self._command_type

    @command_type.setter
    def command_type(self, value):
        assert \
            isinstance(value, int)
        assert value >= 0 and value < 256
        self._command_type = value
