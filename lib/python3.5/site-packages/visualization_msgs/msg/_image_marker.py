# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'ImageMarker'."""

    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _TYPE_SUPPORT = None

    __constants = {
        'CIRCLE': 0,
        'LINE_STRIP': 1,
        'LINE_LIST': 2,
        'POLYGON': 3,
        'POINTS': 4,
        'ADD': 0,
        'REMOVE': 1,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            import rclpy
            from rosidl_generator_py import import_type_support
            rclpy_implementation = rclpy._rclpy.rclpy_get_rmw_implementation_identifier()
            module = import_type_support(
                'visualization_msgs', rclpy_implementation)
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.ImageMarker')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CONVERT_FROM_PY = module.convert_from_py_msg_image_marker
            cls._CONVERT_TO_PY = module.convert_to_py_msg_image_marker
            cls._TYPE_SUPPORT = module.type_support_msg_image_marker
            from builtin_interfaces.msg import Duration
            if Duration.__class__._TYPE_SUPPORT is None:
                Duration.__class__.__import_type_support__()
            from geometry_msgs.msg import Point
            if Point.__class__._TYPE_SUPPORT is None:
                Point.__class__.__import_type_support__()
            from std_msgs.msg import ColorRGBA
            if ColorRGBA.__class__._TYPE_SUPPORT is None:
                ColorRGBA.__class__.__import_type_support__()
            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'CIRCLE': cls.__constants['CIRCLE'],
            'LINE_STRIP': cls.__constants['LINE_STRIP'],
            'LINE_LIST': cls.__constants['LINE_LIST'],
            'POLYGON': cls.__constants['POLYGON'],
            'POINTS': cls.__constants['POINTS'],
            'ADD': cls.__constants['ADD'],
            'REMOVE': cls.__constants['REMOVE'],
        }

    @property
    def CIRCLE(self):
        """Message constant 'CIRCLE'."""
        return Metaclass.__constants['CIRCLE']

    @property
    def LINE_STRIP(self):
        """Message constant 'LINE_STRIP'."""
        return Metaclass.__constants['LINE_STRIP']

    @property
    def LINE_LIST(self):
        """Message constant 'LINE_LIST'."""
        return Metaclass.__constants['LINE_LIST']

    @property
    def POLYGON(self):
        """Message constant 'POLYGON'."""
        return Metaclass.__constants['POLYGON']

    @property
    def POINTS(self):
        """Message constant 'POINTS'."""
        return Metaclass.__constants['POINTS']

    @property
    def ADD(self):
        """Message constant 'ADD'."""
        return Metaclass.__constants['ADD']

    @property
    def REMOVE(self):
        """Message constant 'REMOVE'."""
        return Metaclass.__constants['REMOVE']


class ImageMarker(metaclass=Metaclass):
    """
    Message class 'ImageMarker'.

    Constants:
      CIRCLE
      LINE_STRIP
      LINE_LIST
      POLYGON
      POINTS
      ADD
      REMOVE
    """

    __slots__ = [
        '_header',
        '_ns',
        '_id',
        '_type',
        '_action',
        '_position',
        '_scale',
        '_outline_color',
        '_filled',
        '_fill_color',
        '_lifetime',
        '_points',
        '_outline_colors',
    ]

    def __init__(self, **kwargs):
        assert all(['_' + key in self.__slots__ for key in kwargs.keys()]), \
            "Invalid arguments passed to constructor: %r" % kwargs.keys()
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.ns = kwargs.get('ns', str())
        self.id = kwargs.get('id', int())
        self.type = kwargs.get('type', int())
        self.action = kwargs.get('action', int())
        from geometry_msgs.msg import Point
        self.position = kwargs.get('position', Point())
        self.scale = kwargs.get('scale', float())
        from std_msgs.msg import ColorRGBA
        self.outline_color = kwargs.get('outline_color', ColorRGBA())
        self.filled = kwargs.get('filled', int())
        from std_msgs.msg import ColorRGBA
        self.fill_color = kwargs.get('fill_color', ColorRGBA())
        from builtin_interfaces.msg import Duration
        self.lifetime = kwargs.get('lifetime', Duration())
        self.points = kwargs.get('points', list())
        self.outline_colors = kwargs.get('outline_colors', list())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        from std_msgs.msg import Header
        assert \
            isinstance(value, Header)
        self._header = value

    @property
    def ns(self):
        """Message field 'ns'."""
        return self._ns

    @ns.setter
    def ns(self, value):
        assert \
            isinstance(value, str)
        self._ns = value

    @property
    def id(self):
        """Message field 'id'."""
        return self._id

    @id.setter
    def id(self, value):
        assert \
            isinstance(value, int)
        assert value >= -2147483648 and value < 2147483648
        self._id = value

    @property
    def type(self):
        """Message field 'type'."""
        return self._type

    @type.setter
    def type(self, value):
        assert \
            isinstance(value, int)
        assert value >= -2147483648 and value < 2147483648
        self._type = value

    @property
    def action(self):
        """Message field 'action'."""
        return self._action

    @action.setter
    def action(self, value):
        assert \
            isinstance(value, int)
        assert value >= -2147483648 and value < 2147483648
        self._action = value

    @property
    def position(self):
        """Message field 'position'."""
        return self._position

    @position.setter
    def position(self, value):
        from geometry_msgs.msg import Point
        assert \
            isinstance(value, Point)
        self._position = value

    @property
    def scale(self):
        """Message field 'scale'."""
        return self._scale

    @scale.setter
    def scale(self, value):
        assert \
            isinstance(value, float)
        self._scale = value

    @property
    def outline_color(self):
        """Message field 'outline_color'."""
        return self._outline_color

    @outline_color.setter
    def outline_color(self, value):
        from std_msgs.msg import ColorRGBA
        assert \
            isinstance(value, ColorRGBA)
        self._outline_color = value

    @property
    def filled(self):
        """Message field 'filled'."""
        return self._filled

    @filled.setter
    def filled(self, value):
        assert \
            isinstance(value, int)
        assert value >= 0 and value < 256
        self._filled = value

    @property
    def fill_color(self):
        """Message field 'fill_color'."""
        return self._fill_color

    @fill_color.setter
    def fill_color(self, value):
        from std_msgs.msg import ColorRGBA
        assert \
            isinstance(value, ColorRGBA)
        self._fill_color = value

    @property
    def lifetime(self):
        """Message field 'lifetime'."""
        return self._lifetime

    @lifetime.setter
    def lifetime(self, value):
        from builtin_interfaces.msg import Duration
        assert \
            isinstance(value, Duration)
        self._lifetime = value

    @property
    def points(self):
        """Message field 'points'."""
        return self._points

    @points.setter
    def points(self, value):
        from geometry_msgs.msg import Point
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
        assert \
            ((isinstance(value, Sequence) or
              isinstance(value, Set) or
              isinstance(value, UserList)) and
             not isinstance(value, str) and
             not isinstance(value, UserString) and
             all([isinstance(v, Point) for v in value]) and
             True)
        self._points = value

    @property
    def outline_colors(self):
        """Message field 'outline_colors'."""
        return self._outline_colors

    @outline_colors.setter
    def outline_colors(self, value):
        from std_msgs.msg import ColorRGBA
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
        assert \
            ((isinstance(value, Sequence) or
              isinstance(value, Set) or
              isinstance(value, UserList)) and
             not isinstance(value, str) and
             not isinstance(value, UserString) and
             all([isinstance(v, ColorRGBA) for v in value]) and
             True)
        self._outline_colors = value
