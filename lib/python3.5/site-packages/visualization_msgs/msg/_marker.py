# generated from rosidl_generator_py/resource/_msg.py.em
# generated code does not contain a copyright notice

import logging
import traceback


class Metaclass(type):
    """Metaclass of message 'Marker'."""

    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _TYPE_SUPPORT = None

    __constants = {
        'ARROW': 0,
        'CUBE': 1,
        'SPHERE': 2,
        'CYLINDER': 3,
        'LINE_STRIP': 4,
        'LINE_LIST': 5,
        'CUBE_LIST': 6,
        'SPHERE_LIST': 7,
        'POINTS': 8,
        'TEXT_VIEW_FACING': 9,
        'MESH_RESOURCE': 10,
        'TRIANGLE_LIST': 11,
        'ADD': 0,
        'MODIFY': 0,
        'DELETE': 2,
        'DELETEALL': 3,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            import rclpy
            from rosidl_generator_py import import_type_support
            rclpy_implementation = rclpy._rclpy.rclpy_get_rmw_implementation_identifier()
            module = import_type_support(
                'visualization_msgs', rclpy_implementation)
        except ImportError:
            logger = logging.getLogger('rosidl_generator_py.Marker')
            logger.debug(
                'Failed to import needed modules for type support:\n' + traceback.format_exc())
        else:
            cls._CONVERT_FROM_PY = module.convert_from_py_msg_marker
            cls._CONVERT_TO_PY = module.convert_to_py_msg_marker
            cls._TYPE_SUPPORT = module.type_support_msg_marker
            from builtin_interfaces.msg import Duration
            if Duration.__class__._TYPE_SUPPORT is None:
                Duration.__class__.__import_type_support__()
            from geometry_msgs.msg import Point
            if Point.__class__._TYPE_SUPPORT is None:
                Point.__class__.__import_type_support__()
            from geometry_msgs.msg import Pose
            if Pose.__class__._TYPE_SUPPORT is None:
                Pose.__class__.__import_type_support__()
            from geometry_msgs.msg import Vector3
            if Vector3.__class__._TYPE_SUPPORT is None:
                Vector3.__class__.__import_type_support__()
            from std_msgs.msg import ColorRGBA
            if ColorRGBA.__class__._TYPE_SUPPORT is None:
                ColorRGBA.__class__.__import_type_support__()
            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'ARROW': cls.__constants['ARROW'],
            'CUBE': cls.__constants['CUBE'],
            'SPHERE': cls.__constants['SPHERE'],
            'CYLINDER': cls.__constants['CYLINDER'],
            'LINE_STRIP': cls.__constants['LINE_STRIP'],
            'LINE_LIST': cls.__constants['LINE_LIST'],
            'CUBE_LIST': cls.__constants['CUBE_LIST'],
            'SPHERE_LIST': cls.__constants['SPHERE_LIST'],
            'POINTS': cls.__constants['POINTS'],
            'TEXT_VIEW_FACING': cls.__constants['TEXT_VIEW_FACING'],
            'MESH_RESOURCE': cls.__constants['MESH_RESOURCE'],
            'TRIANGLE_LIST': cls.__constants['TRIANGLE_LIST'],
            'ADD': cls.__constants['ADD'],
            'MODIFY': cls.__constants['MODIFY'],
            'DELETE': cls.__constants['DELETE'],
            'DELETEALL': cls.__constants['DELETEALL'],
        }

    @property
    def ARROW(self):
        """Message constant 'ARROW'."""
        return Metaclass.__constants['ARROW']

    @property
    def CUBE(self):
        """Message constant 'CUBE'."""
        return Metaclass.__constants['CUBE']

    @property
    def SPHERE(self):
        """Message constant 'SPHERE'."""
        return Metaclass.__constants['SPHERE']

    @property
    def CYLINDER(self):
        """Message constant 'CYLINDER'."""
        return Metaclass.__constants['CYLINDER']

    @property
    def LINE_STRIP(self):
        """Message constant 'LINE_STRIP'."""
        return Metaclass.__constants['LINE_STRIP']

    @property
    def LINE_LIST(self):
        """Message constant 'LINE_LIST'."""
        return Metaclass.__constants['LINE_LIST']

    @property
    def CUBE_LIST(self):
        """Message constant 'CUBE_LIST'."""
        return Metaclass.__constants['CUBE_LIST']

    @property
    def SPHERE_LIST(self):
        """Message constant 'SPHERE_LIST'."""
        return Metaclass.__constants['SPHERE_LIST']

    @property
    def POINTS(self):
        """Message constant 'POINTS'."""
        return Metaclass.__constants['POINTS']

    @property
    def TEXT_VIEW_FACING(self):
        """Message constant 'TEXT_VIEW_FACING'."""
        return Metaclass.__constants['TEXT_VIEW_FACING']

    @property
    def MESH_RESOURCE(self):
        """Message constant 'MESH_RESOURCE'."""
        return Metaclass.__constants['MESH_RESOURCE']

    @property
    def TRIANGLE_LIST(self):
        """Message constant 'TRIANGLE_LIST'."""
        return Metaclass.__constants['TRIANGLE_LIST']

    @property
    def ADD(self):
        """Message constant 'ADD'."""
        return Metaclass.__constants['ADD']

    @property
    def MODIFY(self):
        """Message constant 'MODIFY'."""
        return Metaclass.__constants['MODIFY']

    @property
    def DELETE(self):
        """Message constant 'DELETE'."""
        return Metaclass.__constants['DELETE']

    @property
    def DELETEALL(self):
        """Message constant 'DELETEALL'."""
        return Metaclass.__constants['DELETEALL']


class Marker(metaclass=Metaclass):
    """
    Message class 'Marker'.

    Constants:
      ARROW
      CUBE
      SPHERE
      CYLINDER
      LINE_STRIP
      LINE_LIST
      CUBE_LIST
      SPHERE_LIST
      POINTS
      TEXT_VIEW_FACING
      MESH_RESOURCE
      TRIANGLE_LIST
      ADD
      MODIFY
      DELETE
      DELETEALL
    """

    __slots__ = [
        '_header',
        '_ns',
        '_id',
        '_type',
        '_action',
        '_pose',
        '_scale',
        '_color',
        '_lifetime',
        '_frame_locked',
        '_points',
        '_colors',
        '_text',
        '_mesh_resource',
        '_mesh_use_embedded_materials',
    ]

    def __init__(self, **kwargs):
        assert all(['_' + key in self.__slots__ for key in kwargs.keys()]), \
            "Invalid arguments passed to constructor: %r" % kwargs.keys()
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.ns = kwargs.get('ns', str())
        self.id = kwargs.get('id', int())
        self.type = kwargs.get('type', int())
        self.action = kwargs.get('action', int())
        from geometry_msgs.msg import Pose
        self.pose = kwargs.get('pose', Pose())
        from geometry_msgs.msg import Vector3
        self.scale = kwargs.get('scale', Vector3())
        from std_msgs.msg import ColorRGBA
        self.color = kwargs.get('color', ColorRGBA())
        from builtin_interfaces.msg import Duration
        self.lifetime = kwargs.get('lifetime', Duration())
        self.frame_locked = kwargs.get('frame_locked', bool())
        self.points = kwargs.get('points', list())
        self.colors = kwargs.get('colors', list())
        self.text = kwargs.get('text', str())
        self.mesh_resource = kwargs.get('mesh_resource', str())
        self.mesh_use_embedded_materials = kwargs.get('mesh_use_embedded_materials', bool())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = [s[1:] + '=' + repr(getattr(self, s, None)) for s in self.__slots__]
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        from std_msgs.msg import Header
        assert \
            isinstance(value, Header)
        self._header = value

    @property
    def ns(self):
        """Message field 'ns'."""
        return self._ns

    @ns.setter
    def ns(self, value):
        assert \
            isinstance(value, str)
        self._ns = value

    @property
    def id(self):
        """Message field 'id'."""
        return self._id

    @id.setter
    def id(self, value):
        assert \
            isinstance(value, int)
        assert value >= -2147483648 and value < 2147483648
        self._id = value

    @property
    def type(self):
        """Message field 'type'."""
        return self._type

    @type.setter
    def type(self, value):
        assert \
            isinstance(value, int)
        assert value >= -2147483648 and value < 2147483648
        self._type = value

    @property
    def action(self):
        """Message field 'action'."""
        return self._action

    @action.setter
    def action(self, value):
        assert \
            isinstance(value, int)
        assert value >= -2147483648 and value < 2147483648
        self._action = value

    @property
    def pose(self):
        """Message field 'pose'."""
        return self._pose

    @pose.setter
    def pose(self, value):
        from geometry_msgs.msg import Pose
        assert \
            isinstance(value, Pose)
        self._pose = value

    @property
    def scale(self):
        """Message field 'scale'."""
        return self._scale

    @scale.setter
    def scale(self, value):
        from geometry_msgs.msg import Vector3
        assert \
            isinstance(value, Vector3)
        self._scale = value

    @property
    def color(self):
        """Message field 'color'."""
        return self._color

    @color.setter
    def color(self, value):
        from std_msgs.msg import ColorRGBA
        assert \
            isinstance(value, ColorRGBA)
        self._color = value

    @property
    def lifetime(self):
        """Message field 'lifetime'."""
        return self._lifetime

    @lifetime.setter
    def lifetime(self, value):
        from builtin_interfaces.msg import Duration
        assert \
            isinstance(value, Duration)
        self._lifetime = value

    @property
    def frame_locked(self):
        """Message field 'frame_locked'."""
        return self._frame_locked

    @frame_locked.setter
    def frame_locked(self, value):
        assert \
            isinstance(value, bool)
        self._frame_locked = value

    @property
    def points(self):
        """Message field 'points'."""
        return self._points

    @points.setter
    def points(self, value):
        from geometry_msgs.msg import Point
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
        assert \
            ((isinstance(value, Sequence) or
              isinstance(value, Set) or
              isinstance(value, UserList)) and
             not isinstance(value, str) and
             not isinstance(value, UserString) and
             all([isinstance(v, Point) for v in value]) and
             True)
        self._points = value

    @property
    def colors(self):
        """Message field 'colors'."""
        return self._colors

    @colors.setter
    def colors(self, value):
        from std_msgs.msg import ColorRGBA
        from collections import Sequence
        from collections import Set
        from collections import UserList
        from collections import UserString
        assert \
            ((isinstance(value, Sequence) or
              isinstance(value, Set) or
              isinstance(value, UserList)) and
             not isinstance(value, str) and
             not isinstance(value, UserString) and
             all([isinstance(v, ColorRGBA) for v in value]) and
             True)
        self._colors = value

    @property
    def text(self):
        """Message field 'text'."""
        return self._text

    @text.setter
    def text(self, value):
        assert \
            isinstance(value, str)
        self._text = value

    @property
    def mesh_resource(self):
        """Message field 'mesh_resource'."""
        return self._mesh_resource

    @mesh_resource.setter
    def mesh_resource(self, value):
        assert \
            isinstance(value, str)
        self._mesh_resource = value

    @property
    def mesh_use_embedded_materials(self):
        """Message field 'mesh_use_embedded_materials'."""
        return self._mesh_use_embedded_materials

    @mesh_use_embedded_materials.setter
    def mesh_use_embedded_materials(self, value):
        assert \
            isinstance(value, bool)
        self._mesh_use_embedded_materials = value
